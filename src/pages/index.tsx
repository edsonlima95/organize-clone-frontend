import { getCookie } from 'cookies-next'
import Head from 'next/head'
import Link from 'next/link'
import { ArrowCircleUp, MinusCircle, Money, PlusCircle } from 'phosphor-react'
import { useContext } from 'react'
import { useEffect, useState } from 'react'
import { InvoiceModalContext } from '../contexts/InvoiceModalContext'
import api from '../services/axios'
import Layout from './layout'
import dayjs from 'dayjs'
import { InvoiceContext } from "../contexts/InvoiceContext"


function Dashboard() {

  const { openInvoiceModal } = useContext(InvoiceModalContext)

  const { income,
    setIncome,
    expense,
    setExpense,
    setNextInvoices,
    setNextExpenses,
    nextInvoices,
    nextExpenses } = useContext(InvoiceContext)

  const [total, setTotal] = useState(0)


  useEffect(() => {

    homeData()

  }, [])

  async function homeData() {

    try {

      const user = JSON.parse(getCookie("organize.user") as string)
      const wallet = JSON.parse(localStorage.getItem("organize.wallet") as string)

      const response = await api.get(`/home?user=${user.id}&wallet=${wallet.id}`)

      setIncome(response.data.income)
      setExpense(response.data.expense)
      setTotal(response.data.total)
      setNextInvoices(response.data.nextInvoices)
      setNextExpenses(response.data.nextExpenses)

    } catch (error) {

    }
  }


  return (
    <>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout>

        <div className="container mx-auto shadow-md h-full rounded-lg bg-white p-5">

          {/* Titulo da pagina */}
          <span className="block mb-10">
            <h1 className="font-bold text-gray-500 text-4xl mb-4 flex">  Dashboard</h1>
            <span className="block w-full border"></span>
          </span>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mb-8">

            <div className="flex flex-col">
              <h1 className="w-full text-gray-400 mb-1 text-center text-lg font-semibold">Despesas mensal</h1>
             
              <div className="flex flex-col md:flex-row gap-3 mt-5">

                <div className="shadow-lg p-4 w-full rounded-md text-center md:text-left">
                  <span className="text-gray-500 font-medium">Receita </span>
                  <p className="text-[#06DD83] text-xl font-bold">  {new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(income)}</p>
                </div>

                <div className="shadow-lg p-4 w-full rounded-md text-center md:text-left">
                  <span className="text-gray-500 font-medium">Despesa</span>
                  <p className="text-[#ff5454] text-xl font-bold">{new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(expense)}</p>
                </div>

              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
              <div onClick={() => openInvoiceModal("income")} className="shadow-lg cursor-pointer p-3 flex flex-col items-center justify-center rounded-md">
                <PlusCircle size={50} color="#06DD83" />
                <p className="text-gray-500 font-medium mt-2">RECEITA</p>
              </div>
              <div onClick={() => openInvoiceModal("expense")} className="shadow-lg cursor-pointer p-3 flex flex-col items-center justify-center rounded-md">
                <MinusCircle size={50} color="#ff5454" />
                <p className="text-gray-500 font-medium mt-2">DESPESA</p>
              </div>
              <Link href="/invoices">
                <a className="shadow-lg p-3 flex flex-col items-center justify-center rounded-md">
                  <ArrowCircleUp size={50} color="#3f83f8" />
                  <p className="text-gray-500 font-medium mt-">LANÇAMENTOS</p>
                </a>
              </Link>
            </div>

            <div className="">
              <a className={`flex relative flex-col group text-center p-6 md:max-w-sm bg-white rounded-lg border border-gray-200  bg-gradient-to-r ${total <= 0 ? 'from-red-400 to-red-600' : 'from-emerald-300 to-emerald-500'} `}>

                <Money size={50} className="w-full text-white font-semibold" />
                <h5 className="mb-2 text-2xl font-bold tracking-tight text-white">Saldo total</h5>
                <p className="text-white text-xl font-bold">{new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(total)}</p>

              </a>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 pb-4 ">

            <div className="px-4 overflow-x-auto">
              <h1 className="text-center mb-3 text-gray-500 font-bold text-lg">Próximas contas a <span className="text-[#06DD83]">receber</span></h1>
              {nextInvoices?.length > 0 ? (
                <table className={`w-full text-sm text-left text-gray-500`}>
                  <thead className="text-xs text-gray-700 uppercase text-center ">
                    <tr>
                      <th scope="col" className="px-6 py-3">
                        Descrição
                      </th>
                      <th scope="col" className="px-6 py-3">
                        Valor
                      </th>
                      <th scope="col" className="px-6 py-3">
                        Data
                      </th>
                    </tr>
                  </thead>
                  <tbody className="text-center">
                    {nextInvoices?.map(nextInvoice => (
                      <tr key={nextInvoice.id} className="border-b">
                        <td className="px-6 py-4">{nextInvoice.description}</td>
                        <td className="px-6 py-4">{new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(nextInvoice.value)}</td>
                        <td className="px-6 py-4">{dayjs(nextInvoice.date).format("DD/MM/YYYY")}</td>
                      </tr>
                    ))}

                  </tbody>
                </table>) : (<div className="p-4 mb-4 text-sm text-blue-700 bg-blue-100 rounded-lg dark:bg-blue-200 dark:text-blue-800" role="alert">
                  <span className="font-medium">Informação!</span> Ainda não existem contas a receber
                </div>)}

            </div>

            <div className="px-4 mt-5 md:mt-0 overflow-x-auto">
              <h1 className="text-center mb-3 text-gray-500 font-bold text-lg">Próximas contas a <span className="text-[#ff5454]">pagar</span></h1>
              {nextExpenses?.length > 0 ? (
                <table className="w-full text-sm  text-left text-gray-500 table-auto">
                  <thead className="text-xs text-gray-700 uppercase text-center ">
                    <tr>
                      <th scope="col" className="px-6 py-3">
                        Descrição
                      </th>
                      <th scope="col" className="px-6 py-3">
                        Valor
                      </th>
                      <th scope="col" className="px-6 py-3">
                        Data
                      </th>
                    </tr>
                  </thead>
                  <tbody className="text-center">
                    {nextExpenses?.map(nextExpense => (
                      <tr key={nextExpense.id} className="border-b">
                        <td className="px-6 py-4">{nextExpense.description}</td>
                        <td className="px-6 py-4">{new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(nextExpense.value)}</td>
                        <td className="px-6 py-4">{dayjs(nextExpense.date).format("DD/MM/YYYY")}</td>
                      </tr>
                    ))}

                  </tbody>
                </table>) : (<div className="p-4 mb-4 ml-4 text-sm text-blue-700 bg-blue-100 rounded-lg dark:bg-blue-200 dark:text-blue-800" role="alert">
                  <span className="font-medium">Informação!</span> Ainda não existem contas a pagar
                </div>)}

            </div>

          </div>

        </div>
      </Layout>

    </>
  )
}





export default Dashboard
